{"ast":null,"code":"import _slicedToArray from \"/Users/jannemanheimeson/React/Headfolder/Lights-out-Game/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/jannemanheimeson/React/Headfolder/Lights-out-Game/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jannemanheimeson/React/Headfolder/Lights-out-Game/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jannemanheimeson/React/Headfolder/Lights-out-Game/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jannemanheimeson/React/Headfolder/Lights-out-Game/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jannemanheimeson/React/Headfolder/Lights-out-Game/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/jannemanheimeson/React/Headfolder/Lights-out-Game/src/Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props)); // TODO: set initial state\n\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    };\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = []; // TODO: create array-of-arrays of true/false values\n\n      for (var y = 0; y < this.props.nrows; y++) {\n        var row = [];\n\n        for (var x = 0; x < this.props.ncols; x++) {\n          row.push(Math.random() < this.props.chanceLightStartsOn);\n        }\n\n        board.push(row);\n      }\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n\n\n      flipCell(y, x); //Flip initial cell\n\n      flipCell(y, x - 1); //flip left\n\n      flipCell(y, x + 1); //flip right\n\n      flipCell(y - 1, x); //flip below\n\n      flipCell(y + 1, x); //flip above\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n\n      var hasWon = board.every(function (row) {\n        return row.every(function (cell) {\n          return !cell;\n        });\n      });\n      this.setState({\n        board: board,\n        hasWon: hasWon\n      });\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"makeTable\",\n    value: function makeTable() {\n      var _this2 = this;\n\n      var tblBoard = [];\n\n      for (var y = 0; y < this.props.nrows; y++) {\n        var row = [];\n\n        var _loop = function _loop(x) {\n          var coord = \"\".concat(y, \"-\").concat(x);\n          row.push(React.createElement(Cell, {\n            key: coord,\n            isLit: _this2.state.board[y][x],\n            flipCellsAroundMe: function flipCellsAroundMe() {\n              return _this2.flipCellsAround(coord);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 98\n            },\n            __self: this\n          }));\n        };\n\n        for (var x = 0; x < this.props.ncols; x++) {\n          _loop(x);\n        }\n\n        tblBoard.push(React.createElement(\"tr\", {\n          key: y,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        }, row));\n      }\n\n      return React.createElement(\"table\", {\n        className: \"Board\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, tblBoard));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, this.state.hasWon ? React.createElement(\"div\", {\n        className: \"winner\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"neon-orange\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, \"YOU\"), React.createElement(\"span\", {\n        className: \"neon-blue\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, \"WIN!\")) : React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"Board-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"neon-orange\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, \"Lights\"), React.createElement(\"div\", {\n        className: \"neon-blue\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \"Out\")), this.makeTable()));\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  chanceLightStartsOn: 0.25\n};\nexport default Board;","map":{"version":3,"sources":["/Users/jannemanheimeson/React/Headfolder/Lights-out-Game/src/Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","y","nrows","row","x","ncols","push","Math","random","chanceLightStartsOn","coord","split","map","Number","flipCell","every","cell","setState","tblBoard","flipCellsAround","makeTable","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: 0.25\n  };\n  constructor(props) {\n    super(props);\n\n    // TODO: set initial state\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    };\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    for (let y = 0; y < this.props.nrows; y++) {\n      let row = [];\n      for (let x = 0; x < this.props.ncols; x++) {\n        row.push(Math.random() < this.props.chanceLightStartsOn);\n      }\n      board.push(row);\n    }\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let { ncols, nrows } = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n    // TODO: flip this cell and the cells around it\n    flipCell(y, x); //Flip initial cell\n    flipCell(y, x - 1); //flip left\n    flipCell(y, x + 1); //flip right\n    flipCell(y - 1, x); //flip below\n    flipCell(y + 1, x); //flip above\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    let hasWon = board.every(row => row.every(cell => !cell));\n\n    this.setState({ board: board, hasWon: hasWon });\n  }\n\n  /** Render game board or winning message. */\n  makeTable() {\n    let tblBoard = [];\n    for (let y = 0; y < this.props.nrows; y++) {\n      let row = [];\n      for (let x = 0; x < this.props.ncols; x++) {\n        let coord = `${y}-${x}`;\n        row.push(\n          <Cell\n            key={coord}\n            isLit={this.state.board[y][x]}\n            flipCellsAroundMe={() => this.flipCellsAround(coord)}\n          />\n        );\n      }\n      tblBoard.push(<tr key={y}>{row}</tr>);\n    }\n    return (\n      <table className='Board'>\n        <tbody>{tblBoard}</tbody>\n      </table>\n    );\n  }\n  render() {\n    return (\n      <div>\n        {this.state.hasWon ? (\n          <div className='winner'>\n            <span className='neon-orange'>YOU</span>\n            <span className='neon-blue'>WIN!</span>\n          </div>\n        ) : (\n          <div>\n            <div className='Board-title'>\n              <div className='neon-orange'>Lights</div>\n              <div className='neon-blue'>Out</div>\n            </div>\n            {this.makeTable()}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}