{"ast":null,"code":"import _slicedToArray from \"/Users/jannemanheimeson/React/Headfolder/Lights-out-Game/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/jannemanheimeson/React/Headfolder/Lights-out-Game/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jannemanheimeson/React/Headfolder/Lights-out-Game/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jannemanheimeson/React/Headfolder/Lights-out-Game/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jannemanheimeson/React/Headfolder/Lights-out-Game/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jannemanheimeson/React/Headfolder/Lights-out-Game/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/jannemanheimeson/React/Headfolder/Lights-out-Game/src/Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    }; // TODO: set initial state\n\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = []; // TODO: create array-of-arrays of true/false values\n\n      for (var y = 0; y < this.props.nrows; y++) {\n        var row = [];\n\n        for (var x = 0; x < this.props.ncols; x++) {\n          row.push(Math.random() < this.props.chanceLightStartsOn);\n        }\n\n        board.push(row);\n      }\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      console.log('Flipping', coord);\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      } //Flip cell\n\n\n      flipCell(y, x);\n      flipCell(y, x - 1);\n      flipCell(y - 1, x);\n      flipCell(y, x + 1);\n      flipCell(y + 1, x); // TODO: flip this cell and the cells around it\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n\n      var hasWon = board.every(function (row) {\n        return row.every(function (cell) {\n          return !cell;\n        });\n      });\n      this.setState({\n        board: board,\n        hasWon: hasWon\n      });\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      if (this.state.hasWon) {\n        return React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }, \"You win!\");\n      }\n\n      var tblBoard = [];\n\n      for (var y = 0; y < this.props.nrows; y++) {\n        var row = [];\n\n        var _loop = function _loop(x) {\n          var coord = \"\".concat(y, \"-\").concat(x);\n          row.push(React.createElement(Cell, {\n            key: coord,\n            isLit: _this2.state.board[y][x],\n            flipCellsAroundMe: function flipCellsAroundMe() {\n              return _this2.flipCellsAround(coord);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 105\n            },\n            __self: this\n          }));\n        };\n\n        for (var x = 0; x < this.props.ncols; x++) {\n          _loop(x);\n        }\n\n        tblBoard.push(React.createElement(\"tr\", {\n          key: y,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }, row));\n      }\n\n      return React.createElement(\"table\", {\n        className: \"Board\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, tblBoard)); // if the game is won, just show a winning msg & render nothing else\n      // TODO\n      // make table board\n      // TODO\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  ncols: 5,\n  nrows: 5,\n  chanceLightStartsOn: 0.25\n};\nexport default Board;","map":{"version":3,"sources":["/Users/jannemanheimeson/React/Headfolder/Lights-out-Game/src/Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","y","nrows","row","x","ncols","push","Math","random","chanceLightStartsOn","coord","console","log","split","map","Number","flipCell","every","cell","setState","tblBoard","flipCellsAround","defaultProps"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    ncols:5,\n    nrows:5,\n    chanceLightStartsOn:0.25,\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasWon:false,\n      board: this.createBoard()\n    };\n    // TODO: set initial state\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    for(let y=0; y<this.props.nrows; y++) {\n      let row = [];\n      for (let x=0; x<this.props.ncols; x++){\n        row.push(Math.random() < this.props.chanceLightStartsOn);\n      }\n      board.push(row);\n    }\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    console.log('Flipping',coord);\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n    //Flip cell\n    flipCell(y,x);\n    flipCell(y,x-1);\n    flipCell(y-1,x);\n    flipCell(y,x+1);\n    flipCell(y+1,x);\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    let hasWon= board.every(row => row.every(cell => !cell))\n    this.setState({board:board, hasWon:hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n    if(this.state.hasWon){\n      return <h1>You win!</h1>\n    }\n    let tblBoard = [];\n    for(let y=0;y<this.props.nrows; y++){\n      let row = [];\n      for(let x=0; x<this.props.ncols;x++){\n        let coord =`${y}-${x}`\n        row.push(<Cell key={coord} isLit={this.state.board[y][x]}\n          flipCellsAroundMe={() => this.flipCellsAround(coord)}\n          />\n        );\n      }\n      tblBoard.push(<tr key={y}>{row}</tr>);\n    }\n    return(\n      <table className='Board'>\n        <tbody>{tblBoard}</tbody>\n      </table>\n    );\n\n\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n\n    // TODO\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}